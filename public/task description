The overall goal of your Achievement project is to build a REST API. As defined in your project brief (PDF), the REST API must do the following:



Allow users to add a movie to their list of favorites (showing only a text that a movie has been added—more on this later) // PUT /users/:id/:title
Allow users to remove a movie from their list of favorites (showing only a text that a movie has been removed—more on this later) // PUT /users/:id/:title
In this task, you’ll define and document the endpoints for your REST API to facilitate such user behavior.

NOTE!
You won’t be required to include “in-memory” data in your REST API because you’ll be building an external database over the next few Exercises. But if you want to give it a go for some more practice, check out the bonus task!

Directions:

Part 1

In your “documentation.html” file from previous tasks, write down a list of URL endpoints and request methods that correlate with each of the operations in the bulleted list above. Just as you did in the Exercise for the example students API, you may want to format these endpoints in a table, defining the “Request,” the “URL,” and the “Response.” Keep in mind that, unlike with the students API, you’ll be dealing with multiple types of data (movies and users) in your API, so you’ll want to create your endpoint URLs accordingly.
Create the Express code to route all of the endpoints you listed. You don’t have to implement the handler methods in their entirety, but you should at least create the route for the requests, including a response that indicates the action that’s supposed to be taken. For example:
 app.get('/students', (req, res) => {
   res.send('Successful GET request returning data on all the students');
 });
Part 2

Test your endpoints using Postman and take screenshots of each response.
Add documentation for each of your endpoints to your “documentation.html” file. For each endpoint, you should include:
A high-level description of what kind of data the endpoint returns
The endpoint URL
The method type (GET, POST, PUT, or DELETE)
The query parameters (parameters in the URL)
The format of data expected in the body of the request (and an example)
The format of the response data
Commit the changes to your “documentation.html” file to GitHub and submit a link to your project repo, along with a zipped folder of screenshots from your Postman testing, for your tutor to review.